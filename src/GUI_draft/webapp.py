import os
import uvicorn
from starlette.responses import RedirectResponse
from fastapi import FastAPI, Request, Response
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.middleware.wsgi import WSGIMiddleware
from flask import Flask, escape, request
import dashboard
from model_parameters import project_params, scenario_params, input_data_params


app = FastAPI()

flask_app = Flask(__name__)

SERVER_ROOT = os.path.dirname(__file__)

app.mount(
    "/static", StaticFiles(directory=os.path.join(SERVER_ROOT, "static")), name="static"
)

templates = Jinja2Templates(directory=os.path.join(SERVER_ROOT, "templates"))


# option for routing `@app.X` where `X` is one of
# post: to create data.
# get: to read data.
# put: to update data.
# delete: to delete data.

# `127.0.0.1:8000/docs` endpoint will have autogenerated docs for the written code

# Test Driven Development --> https://fastapi.tiangolo.com/tutorial/testing/



@flask_app.route("/")
def flask_main():
    name = request.args.get("name", "World")
    return f"Hello, {escape(name)} from Flask!"



app.mount("/dash", WSGIMiddleware(flask_app))
# register dashapp
dash_app = dashboard.register_dashapp(flask_app, "dashboard", "Data Dashboard", dashboard.dashboard_layout)


@app.get("/")
def landing_page(request: Request, project: int = None) -> Response:
    params = {"request": request}
    if project is not None:
        params["project"] = project
    return templates.TemplateResponse("landing_page.html", params)


@app.get("/project_created")
def project_created(request: Request) -> Response:
    return landing_page(request, project=1)


@app.get("/create_project")
def create_project(request: Request) -> Response:
    return templates.TemplateResponse("create_project.html", {"request": request, "input_params": project_params})


@app.get("/project_overview")
def project_overview(request: Request) -> Response:
    return templates.TemplateResponse("project_overview.html", {"request": request})


@app.get("/create_scenario")
def create_scenario(request: Request) -> Response:
    url = request.url_for("progression", step_id=1)
    return RedirectResponse(url=url)


@app.get("/step/{step_id}")
def progression(request: Request, step_id: int = 1) -> Response:
    content = {"request": request, "step_id": step_id}

    if step_id == 1:
        content["input_params"] = scenario_params
    elif step_id == 2:
        content["input_params"] = input_data_params

    return templates.TemplateResponse(
        f"step{step_id}.html", content
    )


@app.get("/licenses")
def licenses(request: Request) -> Response:
    return templates.TemplateResponse("licenses.html", {"request": request})


if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
